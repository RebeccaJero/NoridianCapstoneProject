@model IEnumerable<TrackTaskItemsDb.Models.ItemDepartment>

<div>
    @Html.ActionLink("Back to List", "Index", "ItemDepartments")
</div>

@foreach (var item in Model)
{
    if (item.IsImpacted == false)
    {
<h3 style="text-align: center;">
    <span style="background:blue; color:white">

        Item Number: @Html.DisplayFor(modelItem => item.ItemNumber)

    </span>
</h3>
    }

}


<h4 class="container-fluid">Details</h4>

@foreach (var item in Model)
{
    if (item.IsImpacted == false)
    {
<ul class="list-group">
    <li class="list-group-item">Created by:  @Html.DisplayFor(modelItem => item.User.UserIdentifier) </li>
    <li class="list-group-item">Outcome:  @Html.DisplayFor(modelItem => item.TaskItem.Outcome)</li>
    <li class="list-group-item">Status: @Html.DisplayFor(modelItem => item.TaskItem.Status1.Status_Desc)</li>
    <li class="list-group-item">Strategic Pillar: @Html.DisplayFor(modelItem => item.TaskItem.StrategicPillar.StrategicPillar1)</li>
    <li class="list-group-item">Action:  @Html.DisplayFor(modelItem => item.TaskItem.Action)</li>
    <li class="list-group-item">BudgetImpact:$ @Html.DisplayFor(modelItem => item.TaskItem.BudgetImpact)</li>
    @if (string.IsNullOrEmpty(item.TaskItem.MandateComment))
    {
        <li class="list-group-item">Mandate Comment: None</li>
    }
    else
    {
        <li class="list-group-item">Mandate Comment: @Html.DisplayFor(modelItem => item.TaskItem.MandateComment)</li>
    }

    <li class="list-group-item">IT Project Number: @Html.DisplayFor(modelItem => item.TaskItem.IT_Project_Number)</li>
    @if (item.TaskItem.IsMandate == false)
    {
        <li class="list-group-item">
            Is Mandate: No

        </li>
    }
    else
    {
        <li class="list-group-item">
            Is Mandate: Yes
        </li>
    }

    <li class="list-group-item">
        <button>
            @Html.ActionLink("Update Details", "Edit", "TaskItems", new { id = item.TaskItemId }, null)
        </button>
    </li>
</ul>

    }
}

<h4 class="container-fluid">Impacted Departments</h4>
@foreach (var item in Model)
{
    if (item.IsImpacted)
    {
        <ul class="list-group">
            <li class="list-group-item">@Html.DisplayFor(modelItem => item.Department.Department_Name)</li>
        </ul>

    }

}

        <div>
            <h4 class="container-fluid">Quarters</h4>
            @foreach (var item in Model)
            {
                if (item.IsImpacted == false)
                {
                    foreach (var quarter in item.TaskItem.QuarterItems.OrderBy(a => a.LastTimeModified))
                    {
                        <ul class="list-group">
                            @if ((quarter.StartQuarterId > 0) && quarter.isOriginal == true)
                            {
                                <li class="list-group-item"> Original Start Quarter: @Html.DisplayFor(modelItem => quarter.Quarter1.Quarter_Desc)</li>
                            }
                            @if ((quarter.EndQuarterId > 0) && quarter.isOriginal == true)
                            {
                                <li class="list-group-item"> Original End Quarter: @Html.DisplayFor(modelItem => quarter.Quarter.Quarter_Desc)</li>
                            }
                            @if ((quarter.StartQuarterId > 0) && quarter.isOriginal == false)
                            {
                                <li class="list-group-item"> Updated Start Quarter: @Html.DisplayFor(modelItem => quarter.Quarter1.Quarter_Desc)</li>
                            }
                            @if ((quarter.EndQuarterId > 0) && quarter.isOriginal == false)
                            {
                                <li class="list-group-item"> Updated End Quarter: @Html.DisplayFor(modelItem => quarter.Quarter1.Quarter_Desc)</li>
                            }

                        </ul>
                    }

                        
                        <button>
                            @Html.ActionLink("Update Quarter", "Create", "QuarterItems", new { id = item.TaskItemId }, null)
                        </button>
                       
                        
                    
                }

            }

        </div>

        <div>


            <h4 class="container-fluid">Update Notes</h4>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th scope="col">@Html.DisplayName("Update Notes")</th>
                        <th scope="col">@Html.DisplayName("Created Date")</th>
                        <th scope="col">@Html.DisplayName("Modified Date")</th>
                        <th scope="col">@Html.DisplayName("Written By")</th>
                    </tr>
                </thead>
                @foreach (var item in Model)
                {

                    foreach (var notes in item.TaskItem.Updates)
                    {

                        if (item.IsImpacted == false)
                        {


                            <tbody>
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => notes.UpdateNotes)</td>

                                    <td>@Html.DisplayFor(modelItem => notes.CreatedDate)</td>
                                    <td>@Html.DisplayFor(modelItem => notes.LastModifiedDate)</td>

                                    @foreach (var user in ViewBag.UserId.Items)
                                    {
                                        if (user.Id == notes.UserId)
                                        {
                                            var UserInfo = user.FirstName + user.LastName;
                                            <td>@UserInfo</td>

                                        }
                                    }

                                </tr>
                            </tbody>

                        }

                    }

                }

            </table>

        </div>



<div>
    @foreach (var item in Model)
    {
        if (item.IsImpacted == false)
        {
            <button>  @Html.ActionLink("Add Update Notes", "Create", "Updates", new { id = item.TaskItemId }, null)</button>
        }

    }

</div>
